
/**
  @ngdoc module
  @name boilerplate
  @module boilerplate
  @description

  This module requires all submodules of your app
 */
angular.module('boilerplate', ['ngMaterial', 'boilerplate.utils', 'boilerplate.landing']);


/**
  @ngdoc module
  @name boilerplate.landing
  @module boilerplate.landing
  @description

  Landing page of the application.
 */
angular.module('boilerplate.landing', ['ng', 'ui.router', 'pascalprecht.translate']);


/**
  @ngdoc module
  @name boilerplate.utils
  @module boilerplate.utils
  @description

  This module contains helpers and global configuration required by your app
 */
angular.module('boilerplate.utils', ['ng', 'ui.router', 'pascalprecht.translate']);

angular.module('boilerplate.landing').config(function($stateProvider) {
  return $stateProvider.state('landing', {
    url: '/',
    templateUrl: 'landing/views/view.html'
  });
});

angular.module('boilerplate.landing').config(function($translateProvider) {
  $translateProvider.translations('en', {
    HOME_TITLE: 'Welcome',
    HOME_TEXT: 'This is the beginning of an extraordinary app...'
  });
  return $translateProvider.translations('fr', {
    HOME_TITLE: 'Bienvenue',
    HOME_TEXT: 'Ceci est le commencement d\'une appli extraordinaire...'
  });
});

angular.module('boilerplate.utils').config(function($translateProvider) {
  $translateProvider.fallbackLanguage('en');
  return $translateProvider.determinePreferredLanguage();
});

angular.module('boilerplate.utils').config(function($locationProvider) {
  $locationProvider.html5Mode(true);
  return $locationProvider.hashPrefix('!');
});


/**
  @ngdoc object
  @name storage
  @module boilerplate.utils
  @description

  This value object is an application-wide data-store.
  It's published in `$rootScope` for easy-access in views.
 */
angular.module('boilerplate.utils').value('storage', {}).run(function($rootScope, storage) {
  return $rootScope.storage = storage;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uY29mZmVlIiwibGFuZGluZy9tb2R1bGUuY29mZmVlIiwidXRpbHMvbW9kdWxlLmNvZmZlZSIsImxhbmRpbmcvY29uZmlnL3JvdXRlcy5jb2ZmZWUiLCJsYW5kaW5nL2NvbmZpZy90cmFuc2xhdGlvbnMuY29mZmVlIiwidXRpbHMvY29uZmlnL2luaXQtdHJhbnNsYXRpb25zLmNvZmZlZSIsInV0aWxzL2NvbmZpZy9pbml0LXVybHMuY29mZmVlIiwidXRpbHMvY29uZmlnL3N0b3JhZ2UuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7Ozs7Ozs7R0FBQTtBQUFBLE9BU08sQ0FBQyxNQUFSLENBQWUsYUFBZixFQUE4QixDQUM1QixZQUQ0QixFQUU1QixtQkFGNEIsRUFHNUIscUJBSDRCLENBQTlCLENBVEEsQ0FBQTs7QUNBQTtBQUFBOzs7Ozs7O0dBQUE7QUFBQSxPQVNPLENBQUMsTUFBUixDQUFlLHFCQUFmLEVBQXNDLENBQ3BDLElBRG9DLEVBRXBDLFdBRm9DLEVBR3BDLHdCQUhvQyxDQUF0QyxDQVRBLENBQUE7O0FDQUE7QUFBQTs7Ozs7OztHQUFBO0FBQUEsT0FTTyxDQUFDLE1BQVIsQ0FBZSxtQkFBZixFQUFvQyxDQUNsQyxJQURrQyxFQUVsQyxXQUZrQyxFQUdsQyx3QkFIa0MsQ0FBcEMsQ0FUQSxDQUFBOztBQ0FBLE9BQU8sQ0FBQyxNQUFSLENBQWUscUJBQWYsQ0FDQSxDQUFDLE1BREQsQ0FDUSxTQUFDLGNBQUQsR0FBQTtTQUNOLGNBQ0EsQ0FBQyxLQURELENBQ08sU0FEUCxFQUVFO0FBQUEsSUFBQSxHQUFBLEVBQUssR0FBTDtBQUFBLElBQ0EsV0FBQSxFQUFhLHlCQURiO0dBRkYsRUFETTtBQUFBLENBRFIsQ0FBQSxDQUFBOztBQ0FBLE9BQU8sQ0FBQyxNQUFSLENBQWUscUJBQWYsQ0FDQSxDQUFDLE1BREQsQ0FDUSxTQUFDLGtCQUFELEdBQUE7QUFDTixFQUFBLGtCQUFrQixDQUFDLFlBQW5CLENBQWdDLElBQWhDLEVBQ0U7QUFBQSxJQUFBLFVBQUEsRUFBWSxTQUFaO0FBQUEsSUFDQSxTQUFBLEVBQVcsa0RBRFg7R0FERixDQUFBLENBQUE7U0FJQSxrQkFBa0IsQ0FBQyxZQUFuQixDQUFnQyxJQUFoQyxFQUNFO0FBQUEsSUFBQSxVQUFBLEVBQVksV0FBWjtBQUFBLElBQ0EsU0FBQSxFQUFXLHlEQURYO0dBREYsRUFMTTtBQUFBLENBRFIsQ0FBQSxDQUFBOztBQ0FBLE9BQU8sQ0FBQyxNQUFSLENBQWUsbUJBQWYsQ0FDQSxDQUFDLE1BREQsQ0FDUSxTQUFDLGtCQUFELEdBQUE7QUFDTixFQUFBLGtCQUFrQixDQUFDLGdCQUFuQixDQUFvQyxJQUFwQyxDQUFBLENBQUE7U0FDQSxrQkFBa0IsQ0FBQywwQkFBbkIsQ0FBQSxFQUZNO0FBQUEsQ0FEUixDQUFBLENBQUE7O0FDQUEsT0FBTyxDQUFDLE1BQVIsQ0FBZSxtQkFBZixDQUNBLENBQUMsTUFERCxDQUNRLFNBQUMsaUJBQUQsR0FBQTtBQUNOLEVBQUEsaUJBQWlCLENBQUMsU0FBbEIsQ0FBNEIsSUFBNUIsQ0FBQSxDQUFBO1NBQ0EsaUJBQWlCLENBQUMsVUFBbEIsQ0FBNkIsR0FBN0IsRUFGTTtBQUFBLENBRFIsQ0FBQSxDQUFBOztBQ0FBO0FBQUE7Ozs7Ozs7O0dBQUE7QUFBQSxPQVVPLENBQUMsTUFBUixDQUFlLG1CQUFmLENBQ0EsQ0FBQyxLQURELENBQ08sU0FEUCxFQUNrQixFQURsQixDQUdBLENBQUMsR0FIRCxDQUdLLFNBQUMsVUFBRCxFQUFhLE9BQWIsR0FBQTtTQUNILFVBQVUsQ0FBQyxPQUFYLEdBQXFCLFFBRGxCO0FBQUEsQ0FITCxDQVZBLENBQUEiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIyMjKlxuICBAbmdkb2MgbW9kdWxlXG4gIEBuYW1lIGJvaWxlcnBsYXRlXG4gIEBtb2R1bGUgYm9pbGVycGxhdGVcbiAgQGRlc2NyaXB0aW9uXG5cbiAgVGhpcyBtb2R1bGUgcmVxdWlyZXMgYWxsIHN1Ym1vZHVsZXMgb2YgeW91ciBhcHBcbiMjI1xuXG5hbmd1bGFyLm1vZHVsZSAnYm9pbGVycGxhdGUnLCBbXG4gICduZ01hdGVyaWFsJ1xuICAnYm9pbGVycGxhdGUudXRpbHMnXG4gICdib2lsZXJwbGF0ZS5sYW5kaW5nJ1xuXVxuIiwiIyMjKlxuICBAbmdkb2MgbW9kdWxlXG4gIEBuYW1lIGJvaWxlcnBsYXRlLmxhbmRpbmdcbiAgQG1vZHVsZSBib2lsZXJwbGF0ZS5sYW5kaW5nXG4gIEBkZXNjcmlwdGlvblxuXG4gIExhbmRpbmcgcGFnZSBvZiB0aGUgYXBwbGljYXRpb24uXG4jIyNcblxuYW5ndWxhci5tb2R1bGUgJ2JvaWxlcnBsYXRlLmxhbmRpbmcnLCBbXG4gICduZydcbiAgJ3VpLnJvdXRlcidcbiAgJ3Bhc2NhbHByZWNodC50cmFuc2xhdGUnXG5dXG4iLCIjIyMqXG4gIEBuZ2RvYyBtb2R1bGVcbiAgQG5hbWUgYm9pbGVycGxhdGUudXRpbHNcbiAgQG1vZHVsZSBib2lsZXJwbGF0ZS51dGlsc1xuICBAZGVzY3JpcHRpb25cblxuICBUaGlzIG1vZHVsZSBjb250YWlucyBoZWxwZXJzIGFuZCBnbG9iYWwgY29uZmlndXJhdGlvbiByZXF1aXJlZCBieSB5b3VyIGFwcFxuIyMjXG5cbmFuZ3VsYXIubW9kdWxlICdib2lsZXJwbGF0ZS51dGlscycsIFtcbiAgJ25nJ1xuICAndWkucm91dGVyJ1xuICAncGFzY2FscHJlY2h0LnRyYW5zbGF0ZSdcbl1cbiIsImFuZ3VsYXIubW9kdWxlICdib2lsZXJwbGF0ZS5sYW5kaW5nJ1xuLmNvbmZpZyAoJHN0YXRlUHJvdmlkZXIpIC0+XG4gICRzdGF0ZVByb3ZpZGVyXG4gIC5zdGF0ZSAnbGFuZGluZycsXG4gICAgdXJsOiAnLydcbiAgICB0ZW1wbGF0ZVVybDogJ2xhbmRpbmcvdmlld3Mvdmlldy5odG1sJ1xuIiwiYW5ndWxhci5tb2R1bGUgJ2JvaWxlcnBsYXRlLmxhbmRpbmcnXG4uY29uZmlnICgkdHJhbnNsYXRlUHJvdmlkZXIpIC0+XG4gICR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMgJ2VuJyxcbiAgICBIT01FX1RJVExFOiAnV2VsY29tZSdcbiAgICBIT01FX1RFWFQ6ICdUaGlzIGlzIHRoZSBiZWdpbm5pbmcgb2YgYW4gZXh0cmFvcmRpbmFyeSBhcHAuLi4nXG5cbiAgJHRyYW5zbGF0ZVByb3ZpZGVyLnRyYW5zbGF0aW9ucyAnZnInLFxuICAgIEhPTUVfVElUTEU6ICdCaWVudmVudWUnXG4gICAgSE9NRV9URVhUOiAnQ2VjaSBlc3QgbGUgY29tbWVuY2VtZW50IGRcXCd1bmUgYXBwbGkgZXh0cmFvcmRpbmFpcmUuLi4nXG4iLCJhbmd1bGFyLm1vZHVsZSAnYm9pbGVycGxhdGUudXRpbHMnXG4uY29uZmlnICgkdHJhbnNsYXRlUHJvdmlkZXIpIC0+XG4gICR0cmFuc2xhdGVQcm92aWRlci5mYWxsYmFja0xhbmd1YWdlICdlbidcbiAgJHRyYW5zbGF0ZVByb3ZpZGVyLmRldGVybWluZVByZWZlcnJlZExhbmd1YWdlKClcbiIsImFuZ3VsYXIubW9kdWxlICdib2lsZXJwbGF0ZS51dGlscydcbi5jb25maWcgKCRsb2NhdGlvblByb3ZpZGVyKSAtPlxuICAkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUgdHJ1ZVxuICAkbG9jYXRpb25Qcm92aWRlci5oYXNoUHJlZml4ICchJ1xuIiwiIyMjKlxuICBAbmdkb2Mgb2JqZWN0XG4gIEBuYW1lIHN0b3JhZ2VcbiAgQG1vZHVsZSBib2lsZXJwbGF0ZS51dGlsc1xuICBAZGVzY3JpcHRpb25cblxuICBUaGlzIHZhbHVlIG9iamVjdCBpcyBhbiBhcHBsaWNhdGlvbi13aWRlIGRhdGEtc3RvcmUuXG4gIEl0J3MgcHVibGlzaGVkIGluIGAkcm9vdFNjb3BlYCBmb3IgZWFzeS1hY2Nlc3MgaW4gdmlld3MuXG4jIyNcblxuYW5ndWxhci5tb2R1bGUgJ2JvaWxlcnBsYXRlLnV0aWxzJ1xuLnZhbHVlICdzdG9yYWdlJywge31cblxuLnJ1biAoJHJvb3RTY29wZSwgc3RvcmFnZSkgLT5cbiAgJHJvb3RTY29wZS5zdG9yYWdlID0gc3RvcmFnZVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9